package main

import "fmt"

func swapUnsafe(num1 *int, num2 *int) {
	if *num1 == *num2 { // Проверяем, совпадают ли два адреса
		return
	}

	*num1 = *num1 + *num2 // может произойти переполнение
	*num2 = *num1 - *num2
	*num1 = *num1 - *num2
}

func swap(num1 *int, num2 *int) {
	*num1 = *num1 ^ *num2
	*num2 = *num1 ^ *num2
	*num1 = *num1 ^ *num2
}

func main() {
	num1, num2  := 3, 4
  swap(&num1, &num2);
	fmt.Println(num1, num2)
}

// *num1 = *num1 ^ *num2: В этой строке выполняется обмен значениями между *num1 и *num2 
// с использованием операции побитового исключающего ИЛИ (^). Побитовый XOR работает 
// следующим образом: если биты в операндах различаются, то в результирующем числе на 
// этой позиции будет установлен бит 1, в противном случае - бит 0. Таким образом, 
// результатом этой операции будет значение, которое представляет собой "обмен" битов 
// между *num1 и *num2.

// *num2 = *num1 ^ *num2: Теперь, после первой строки, *num1 содержит результат обмена,
// исключая *num2, а *num2 все еще содержит изначальное значение *num1. Эта строка 
// выполняет обратный обмен: *num1 содержит результат обмена, исключая *num2, и *num2
// содержит изначальное значение *num2. Таким образом, после выполнения этой строки 
// *num1 и *num2 были обменены местами.

// *num1 = *num1 ^ *num2: Финальная строка выполняет обратный обмен между *num1 и *num2,
// чтобы вернуть *num1 к его исходному значению, которое было сохранено в *num2 после 
// первой строки. Теперь *num1 и *num2 были успешно обменены местами.

// Этот метод обмена значений без использования временной переменной называется "XOR-обмен"
// и основан на свойствах побитового XOR. Он является эффективным и безопасным способом 
// обмена значений между переменными.