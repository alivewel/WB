package main

import "fmt"

func squares(c chan int, numbers []int) {
	for _, num := range numbers {
		c <- num * num
	}
	close(c)
}

func main() {
	arrayInt := []int{2, 4, 6, 8, 10}

	c := make(chan int)

	go squares(c, arrayInt)

	totalSum := 0

	for val := range c {
		totalSum += val
		fmt.Println(val)
	}
	fmt.Printf("Сумма квадратов: %d\n", totalSum)
}

// Первый способ использует множество горутин для параллельных вычислений,
// что может быть полезно, если на входе большой объем данных или задач,
// которые можно выполнять параллельно. Он более общий и позволяет
// масштабировать вычисления на более сложных задачах.

// Второй способ проще и более прямолинейный. Он использует одну горутину
// для вычисления и суммирования квадратов, что может быть достаточно для более простых задач.

// Если ваша задача проста и не требует параллельных вычислений, второй способ
// может быть более непосредственным и легким для понимания. Если на входе
// более сложные вычисления или задачи, которые можно параллельно распараллелить,
// то первый способ с использованием множества горутин будет более эффективным.
